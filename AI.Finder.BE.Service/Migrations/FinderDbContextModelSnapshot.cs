// <auto-generated />
using System;
using AI.Finder.BE.Service;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AI.Finder.BE.Service.Migrations
{
    [DbContext(typeof(FinderDbContext))]
    partial class FinderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AI.Finder.BE.Service.Features.ActivityLog.ActivityLogModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ActivityTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("UserId");

                    b.ToTable("activity_log", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.ActivityType.ActivityTypeModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("activity", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.AddressType.AddressTypeModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsRelationalData")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("address_type", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.BloodGroup.BloodGroupModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("blood_group", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.BodyType.BodyTypeModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("body_type", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.Candidate.CandidateModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AboutMe")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long?>("BloodGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BodyTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("CandidateAssetDetails")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("ChildrenNotWithMe")
                        .HasColumnType("integer");

                    b.Property<int>("ChildrenWithMe")
                        .HasColumnType("integer");

                    b.Property<long?>("ComplexionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<long>("HeightInCentimeter")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsResident")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpecialNeed")
                        .HasColumnType("boolean");

                    b.Property<long?>("MaritalStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MotherTongueId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long?>("NativeDistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("NativeTown")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<long?>("NativesTownId")
                        .HasColumnType("bigint");

                    b.Property<string>("OtherReligion")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("OtherReligiousInformation")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("RegistrationId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ReligionTreePath")
                        .HasColumnType("text");

                    b.Property<long?>("ResidentCountryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResidentDistrctId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResidentStateId")
                        .HasColumnType("bigint");

                    b.Property<string>("ResidentTown")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<long?>("ResidentTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResidentsTownId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TwinsCandidateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UnitsId")
                        .HasColumnType("bigint");

                    b.Property<short>("WeightInKilogram")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("BodyTypeId");

                    b.HasIndex("ComplexionId");

                    b.HasIndex("CreatedContactId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("MotherTongueId");

                    b.HasIndex("NativeDistrictId");

                    b.HasIndex("NativesTownId");

                    b.HasIndex("ResidentCountryId");

                    b.HasIndex("ResidentDistrctId");

                    b.HasIndex("ResidentStateId");

                    b.HasIndex("ResidentTypeId");

                    b.HasIndex("ResidentsTownId");

                    b.HasIndex("TwinsCandidateId");

                    b.HasIndex("UnitsId");

                    b.ToTable("candidate", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.Complexion.ComplexionModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("complexion", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.Country.CountryModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.District.DistrictModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("district", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.Gender.GenderModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("gender", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.Language.LanguageModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("language", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.MaritalStatus.MaritalStatusModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("marital_status", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.Religion.ReligionModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parentid");

                    b.Property<string>("TreePath")
                        .HasColumnType("ltree")
                        .HasColumnName("treepath");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("religion", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.Resident.ResidentTypeModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("resident_type", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.Samples.SampleAutherization.SampleAutherizationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SampleAutherization");
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.Samples.SampleModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AuditProp")
                        .HasColumnType("jsonb");

                    b.Property<long>("Code")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("sample", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.State.StateModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("state", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.Town.TownModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("town", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.Unit.UnitModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("BaseValue")
                        .HasColumnType("real");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<short>("ConversionUnit")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("unit", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.User.UserModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("EmailConfirmationToken")
                        .HasColumnType("text");

                    b.Property<string>("EmailId")
                        .HasColumnType("text");

                    b.Property<DateTime>("EmailTokenGeneratedTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PassowrdSalt")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneConfirmationToken")
                        .HasColumnType("text");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PhoneTokenGeneratedTimestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmailId")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.ActivityLog.ActivityLogModel", b =>
                {
                    b.HasOne("AI.Finder.BE.Service.Features.ActivityType.ActivityTypeModel", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("AI.Finder.BE.Service.Features.Candidate.CandidateModel", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId");

                    b.HasOne("AI.Finder.BE.Service.Features.User.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ActivityType");

                    b.Navigation("Candidate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.Candidate.CandidateModel", b =>
                {
                    b.HasOne("AI.Finder.BE.Service.Features.BloodGroup.BloodGroupModel", "BloodGroup")
                        .WithMany()
                        .HasForeignKey("BloodGroupId");

                    b.HasOne("AI.Finder.BE.Service.Features.BodyType.BodyTypeModel", "BodyType")
                        .WithMany()
                        .HasForeignKey("BodyTypeId");

                    b.HasOne("AI.Finder.BE.Service.Features.Complexion.ComplexionModel", "Complexion")
                        .WithMany()
                        .HasForeignKey("ComplexionId");

                    b.HasOne("AI.Finder.BE.Service.Features.AddressType.AddressTypeModel", "CreatedContact")
                        .WithMany()
                        .HasForeignKey("CreatedContactId");

                    b.HasOne("AI.Finder.BE.Service.Features.Gender.GenderModel", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("AI.Finder.BE.Service.Features.MaritalStatus.MaritalStatusModel", "MaritalStatus")
                        .WithMany()
                        .HasForeignKey("MaritalStatusId");

                    b.HasOne("AI.Finder.BE.Service.Features.Language.LanguageModel", "MotherTongue")
                        .WithMany()
                        .HasForeignKey("MotherTongueId");

                    b.HasOne("AI.Finder.BE.Service.Features.District.DistrictModel", "NativeDistrict")
                        .WithMany()
                        .HasForeignKey("NativeDistrictId");

                    b.HasOne("AI.Finder.BE.Service.Features.Town.TownModel", "NativesTown")
                        .WithMany()
                        .HasForeignKey("NativesTownId");

                    b.HasOne("AI.Finder.BE.Service.Features.Country.CountryModel", "ResidentCountry")
                        .WithMany()
                        .HasForeignKey("ResidentCountryId");

                    b.HasOne("AI.Finder.BE.Service.Features.District.DistrictModel", "ResidentDistrct")
                        .WithMany()
                        .HasForeignKey("ResidentDistrctId");

                    b.HasOne("AI.Finder.BE.Service.Features.State.StateModel", "ResidentState")
                        .WithMany()
                        .HasForeignKey("ResidentStateId");

                    b.HasOne("AI.Finder.BE.Service.Features.Resident.ResidentTypeModel", "ResidentType")
                        .WithMany()
                        .HasForeignKey("ResidentTypeId");

                    b.HasOne("AI.Finder.BE.Service.Features.Town.TownModel", "ResidentsTown")
                        .WithMany()
                        .HasForeignKey("ResidentsTownId");

                    b.HasOne("AI.Finder.BE.Service.Features.Candidate.CandidateModel", "TwinsCandidate")
                        .WithMany()
                        .HasForeignKey("TwinsCandidateId");

                    b.HasOne("AI.Finder.BE.Service.Features.Unit.UnitModel", "Units")
                        .WithMany()
                        .HasForeignKey("UnitsId");

                    b.Navigation("BloodGroup");

                    b.Navigation("BodyType");

                    b.Navigation("Complexion");

                    b.Navigation("CreatedContact");

                    b.Navigation("Gender");

                    b.Navigation("MaritalStatus");

                    b.Navigation("MotherTongue");

                    b.Navigation("NativeDistrict");

                    b.Navigation("NativesTown");

                    b.Navigation("ResidentCountry");

                    b.Navigation("ResidentDistrct");

                    b.Navigation("ResidentState");

                    b.Navigation("ResidentType");

                    b.Navigation("ResidentsTown");

                    b.Navigation("TwinsCandidate");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.District.DistrictModel", b =>
                {
                    b.HasOne("AI.Finder.BE.Service.Features.State.StateModel", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("State");
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.State.StateModel", b =>
                {
                    b.HasOne("AI.Finder.BE.Service.Features.Country.CountryModel", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AI.Finder.BE.Service.Features.Town.TownModel", b =>
                {
                    b.HasOne("AI.Finder.BE.Service.Features.District.DistrictModel", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.Navigation("District");
                });
#pragma warning restore 612, 618
        }
    }
}
